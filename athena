#!/usr/bin/env python3
__doc__ = '''
AWS Athena stored query tool
Make sure you are authenticated with selected AWS profile.

Usage:
\t-s / --select\tAdd additional SELECT columns, comma-separated i.e. order_id,column2,column3
\n
\t-a / --and\tcolumn1=<value1,value2> column2=value\tAdd AND statements to a query
\t-o / --or\tcolumn1=<value1,value2> column2=value\tAdd OR statements to a query 
\n
\tYou can use the following logical operators with and / or (-a / -o):\n
\t\tcolumn=value\t\t\t- column is EQUAL to
\t\tcolumn^value\t\t\t- column is NOT EQUAL to
\t\tcolumn~value\t\t\t- column is LIKE
\t\tcolumn=value1,value2,value3\t- column is IN ('value1', 'value2', 'value3')
\n
\t-p <PARAMETER=VALUE>\tReplace any params with value, i.e. -p table=mytable would replace \
all {{table}} placeholders wih mytable
\n
\t-g / --group-by\tAdd additional GROUP BY columns, if you do not specify the column names,
\t\t\tit will default to the SELECT column names, separated by comma-separated i.e. order_id,column2,column3\n
\t-o / --order-by\tcolumn1=asc,column2=desc,column3\n\n\t\t\tAdd additional ORDER BY columns, if you do not specify the column names,
\t\t\tit will default to the SELECT column names, separated by comma-separated i.e. order_id,column2,column3
\n
\t-c\tWill output the results as CSV rather than a table

Examples:
    \tathena -q default -v -a hour=24,day^30

'''
import sys
import argparse
import logging as log

from src.aws import Aws
from src.config import Config
from src.athena import Athena
from src.sql_builder import SqlBuilder

log.basicConfig(
        level=log.DEBUG,
        stream=sys.stdout,
       format='%(asctime)s - %(levelname)s - %(message)s'
)


def run_athena(args):
    """run_athena - main program loop executed by main."""
    aws = Aws()
    config = Config()

    # create the aws session and get the system parameters
    _, params = aws.get_session()
    config.add_params_dict(params)

    query = {}
    database = 'default'

    if args.query:
        query = {'value': args.query}

    if args.params:
        config.add_params_arr(args.params)
        config.update_config_values()
    config.set_default_config_params()

    if args.query_name:
        query = config.get_query_by_name(args.query_name)
        if not query:
            print("query not found\n")
            query_names = config.get_all_query_names()
            for query_name in query_names:
                print(f"\t{query_name}")
            sys.exit(0)

    if 'database' in query:
        database = query.get('database')

    if args.database:
        database = args.database

    s3_bucket = config.get_config_value('s3_bucket')
    params = config.get_params()
    log.info("using bucket  [%s]", s3_bucket)
    log.info("using params  [%s]", params)

    options = {
            's3_bucket': s3_bucket,
            'database': database,
            'query': query,
            }

    run_query(config, args, **options)


def run_query(config, args, **options):
    """run_query - loads athena class to execute query using s3_bucket"""
    athena = Athena()
    sql_builder = SqlBuilder()

    s3_bucket = options['s3_bucket']
    database = options['database']
    query = options['query']

    if args.list_databases:
        log.info("listing databases")
        athena.list_databases()

    log.info("")
    log.info("query object [%s]", query)

    # Build a list of statements before applying them to the query

    if 'operators' in query:
        log.info("loading operators from file")
        for operator in query['operators']:
            if isinstance(operator['value'], list):
                value = operator['value']
            elif isinstance(operator['value'], str):
                value = [operator['value']]
            sql_builder.add_statements(
                    [{'name': operator['name'], 'value': value}], False)

    # AND statements, append or override?
    if args.add_and_statements:
        sql_builder.generate_query_operators('and',
                args.add_and_statements)
    if args.and_statements:
        # override exising and statements from config file
        sql_builder.generate_query_operators('and',
                args.and_statements, override=True)

    # OR statements, append or override?
    if args.add_or_statements:
        sql_builder.generate_query_operators('or',
                args.add_or_statements)
    if args.or_statements:
        # override exising and statements from config file
        sql_builder.generate_query_operators('or',
                args.or_statements, override=True)

    if args.group_by:
        sql_builder.add_statements(
                [{'name': 'group_by', 'value':
                    f"GROUP BY {args.group_by}"}], override=True)
    if args.order_by:
        sql_builder.add_statements(
                [{'name': 'order_by', 'value':
                    f"ORDER BY {args.order_by}"}], override=True)
    if args.limit:
        sql_builder.add_statements(
                [{'name': 'limit', 'value':
                    f" LIMIT {args.limit}"}], override=True)

    log.info("")
    log.info("final outputs:")
    log.info("params [%s]", config.get_params())
    log.info("sql statements [%s]", sql_builder.get_statements())
    sql_builder.add_statements_dict(config.get_params())
    query = sql_builder.update_sql_statement(query)
    query = sql_builder.remove_unused_parameters(query)
    log.info(query['value'])

    response = athena.query(s3_bucket, database, query)
    athena.print_results(config, response, args.csv_mode)


def main():
    """main program function"""
    log.getLogger().setLevel(log.CRITICAL)
    parser = argparse.ArgumentParser(description=__doc__.format(me=sys.argv[0]),
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--list-databases', action='store_true', help='List Athena databases')
    parser.add_argument('-v', '--verbose', dest='verbose', nargs='?',
                        const='arg_was_not_given', help='Show logging output')

    parser.add_argument('-c', '--csv', dest='csv_mode', nargs='?',
                        const='arg_was_not_given', help='Generate comma seperated.')

    parser.add_argument('-Q', '--query', default=None, dest='query',
            help='Execute manual query...i.e; "select * from table limit 1;"')
    parser.add_argument('-q', '--query_name', dest='query_name', nargs='?',
                        const='arg_was_not_given', help='Query name.')
    parser.add_argument('-d', '--database', dest='database', nargs='?',
            const='arg_was_not_given', help='Use database <database_name>')
    parser.add_argument('-p', '--params', dest='params', nargs='+',
            help='Parameters; i.e. -v value1=your value2=values environment=test')

    parser.add_argument('-s', '--select', dest='select', nargs='?',
            help='Additional select statements.')

    parser.add_argument('-a', '--and', dest='add_and_statements', nargs='+',
            help='Additional AND statements')
    parser.add_argument('-A', '--AND', dest='and_statements', nargs='+',
            help='Additional AND statements')
    parser.add_argument('-o', '--or', dest='add_or_statements', nargs='+',
            help='Additional OR statements')
    parser.add_argument('-O', '--OR', dest='or_statements', nargs='+',
            help='Additional OR statements')

    parser.add_argument('-g', '--group-by', dest='group_by', nargs='?',
            const='arg_was_not_given', help='Additional GROUP BY statements.')
    parser.add_argument('-b', '--order-by', dest='order_by', nargs='?',
            const='arg_was_not_given', help='Additional ORDER BY statements.')

    parser.add_argument('-l', '--limit', dest='limit', nargs='?',
            const='arg_was_not_given', help='LIMIT <value>; e.g. -l 10')

    args = parser.parse_args()
    if args.verbose:
        log.getLogger('boto').setLevel(log.CRITICAL)
        log.getLogger('botocore').setLevel(log.CRITICAL)
        log.getLogger().setLevel(log.INFO)
        log.getLogger('athena').info("verbose logging enabled")

    log.info('starting athena query tool')

    run_athena(args)


if __name__ == '__main__':
    sys.exit(main())
